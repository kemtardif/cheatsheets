# Ruby Tutorial /////////////////////

print "hello"
puts "World" #print and add new line

=begin This is
the variable Section
=end 
my_first_variable = 5
my_second_variable = 3.5
my_third_variable = "variable"

puts "My name is #{name}"
puts "My name is" + name

3.14.to_i  #convert to integer 3
3.to_f #convert to float 3.0
3.0.to_s #convert to string "3.0"
100 +"50".to_i # print 150

greeting = "Hello"
greeting.length #return 5
greeting[0] # return "H"
greeting.include? "llo" #return True
greeting.include? "z" # return False
greeting[1,3] #return "ell"

2*3 #return an integer
2**3 #2 to the power 3
10 % 3 #Usual modulo
1 + 2*3 #Order of operations is preserved
10/3.0 #return a float

num =10
num += 100 #Add 100 to num
num.abs() #Absolute value of num
num.round() #Round num to integer

Math.sqrt(144)
Math.log(1)

name = gets #value of name is prompted from user using console
name = gets.chomp #Same, but remove added line

# Arrays

new_list = [1, 2, "Oh HI MARK", 3.5, [4, 5]]
new_list[1] #return 2
new_list[4][0] = 6 #replace 4 by 6
new_list[1..3] #return 2, "Oh HI MARK" and 3.5
new_list.length

empty_list = []
empty_list.push("What's good")
empty_list.push("Homie")
empty_list.pop #remove last element in array
empty_list.reverse #reverse elements in array
empty_list.include? "RudeBoi" #return False

#Functions

def noice_function(x, y=A) #Gives y a default value if none is given
    Do something
    return value
end

answer = noice_function(a,b)
answer = noice_function(a) #equals noice_function(a, A)

#Conditionals and, or >, <, >=, <=, !=, ==

if condition1 and !condition2 #if condition1 is TRUE and condition2 is False
    Do something   
elsif condition 3
    Do something else
else
    DO other things    
end

#Switch statements : check when variable is equal to various values

value = x

case value
    when y
        something
    when z
        something something
    else
        something something something
end

#While loops

index = 1
while index <=5
    Do something
    index +=1
end

#For loops

for index in 0..5 #loop index from 0 to 4
    DO something
end

5.times do |index| #Same as above
    Do something
end

for item in array 
    Do something
end

array.each do |index| #Same as above
    Do something
end

#Object-orientation

class Animal
    attr_accessor :name, :age
    def initialize(name, age)
        @name = name
        @age = age
    end

    def roar()
        DO something
        puts "I am a" + self.name
    end
end

cat = Animal.new("Cat", 5)
cat.name
cat.roar()

#Inheritance

class Super_class
    attr_accessor :value1, :value2
    def initialize(value1, value2)
        @value1 = value1
        @value2 = value2
    end

    def methodA()
        Do something
    end

    def methodB()
        Do something
    end
end

class Sub_class < Super_class #Sub_class inherit methods from Super_Class
    attr_accessor :value3
    def initialize(value1, value2, value3)
        @value3 = value3
        super(value1, value3)
    end

    def methodC()
        Do something
    end

    def methodA() #Overwrite inherited methodA
        Do something
    end
end

objectA = Super_class.new(value1, value2)
objectA.methodA()

objectB = Sub_class.new(value1, value2, value3)
objectB.methodB()
objectB.methodC()




